// <auto-generated />
using System;
using Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AccountDBContext))]
    partial class AccountDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.AccountMovimentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BalanceSnapShot")
                        .HasColumnType("numeric");

                    b.Property<Guid>("FK_Account")
                        .HasColumnType("uuid");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FK_Account");

                    b.ToTable("AccountsMovimentations");
                });

            modelBuilder.Entity("Domain.Entities.AccountOperationPerformedMessageOutbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AccountBalanceAfeterOperation")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AccountBalanceBeforeOperation")
                        .HasColumnType("numeric");

                    b.Property<string>("AccountDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FK_Account")
                        .HasColumnType("uuid");

                    b.Property<decimal>("OperationAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("OperationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperationUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FK_Account");

                    b.ToTable("AccountOperationPerformedMessageOutbox");
                });

            modelBuilder.Entity("Domain.Entities.AccountMovimentation", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Movimentations")
                        .HasForeignKey("FK_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.AccountOperationPerformedMessageOutbox", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Outbox")
                        .HasForeignKey("FK_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Movimentations");

                    b.Navigation("Outbox");
                });
#pragma warning restore 612, 618
        }
    }
}
